version: "3.6"

services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - 8080:8080
    depends_on:
      - test-service
      - test-service-2
      - user-service-0
      - user-service-1
      - user-service-2
      - party-query-service-0
      - party-query-service-1
      - party-query-service-2
      - party-command-service-0
      - party-command-service-1
      - party-command-service-2

  user-service-0:
    hostname: user-service-0
    build:
      context: ./userService
      dockerfile: Dockerfile
    volumes:
      - .userService/:/src
    env_file:
      - .env
    depends_on:
      - user_mongodb0
    environment:
      - MONGO_CONNECTION_STRING=${USER_MONGO_URL0}
      - ID=0
      - HOSTNAME=user-service-0
    expose:
      - 3000
  user-service-1:
    hostname: user-service-1
    build:
      context: ./userService
      dockerfile: Dockerfile
    volumes:
      - .userService/:/src
    env_file:
      - .env
    depends_on:
      - user_mongodb1
    environment:
      - MONGO_CONNECTION_STRING=${USER_MONGO_URL1}
      - ID=1
      - HOSTNAME=user-service-1
    expose:
      - 3000
  user-service-2:
    hostname: user-service-2
    build:
      context: ./userService
      dockerfile: Dockerfile
    volumes:
      - .userService/:/src
    env_file:
      - .env
    depends_on:
      - user_mongodb2
    environment:
      - MONGO_CONNECTION_STRING=${USER_MONGO_URL2}
      - ID=2
      - HOSTNAME=user-service-2
    expose:
      - 3000
  party-query-service-0:
    hostname: party-query-service-0
    build:
      context: ./partyQueryService
      dockerfile: Dockerfile
    volumes:
      - .partyQueryService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 4000
  party-query-service-1:
    hostname: party-query-service-1
    build:
      context: ./partyQueryService
      dockerfile: Dockerfile
    volumes:
      - .partyQueryService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 4000
  party-query-service-2:
    hostname: party-query-service-2
    build:
      context: ./partyQueryService
      dockerfile: Dockerfile
    volumes:
      - .partyQueryService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 4000
  party-command-service-0:
    hostname: party-command-service-0
    build:
      context: ./partyCommandService
      dockerfile: Dockerfile
    volumes:
      - .partyCommandService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 5000
  party-command-service-1:
    hostname: party-command-service-1
    build:
      context: ./partyCommandService
      dockerfile: Dockerfile
    volumes:
      - .partyCommandService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 5000
  party-command-service-2:
    hostname: party-command-service-2
    build:
      context: ./partyCommandService
      dockerfile: Dockerfile
    volumes:
      - .partyCommandService/:/src
    env_file:
      - .env
    depends_on:
      - party_mongodb0 # We should maybe think about creating a different DB instance for the party query/command services. This way we clearly have multiple dbs.
    environment:
      - MONGO_CONNECTION_STRING=${PARTY_MONGO_URL}
    expose:
      - 5000
  test-service:
    hostname: test-service
    build:
      context: ./testService
      dockerfile: Dockerfile
    env_file:
      - .env
    expose:
      - 1234
  test-service-2:
    hostname: test-service-2
    build:
      context: ./testService
      dockerfile: Dockerfile
    env_file:
      - .env
    expose:
      - 1234
  user_mongodb0:
    image: mongo
    container_name: user_mongodb0
    expose:
      - 27017
    ports:
      - 27017:27017
    volumes:
      - user_mongodb0_userData:/data/db
      - user_mongodb0_config:/data/configdb
    restart: always
  user_mongodb1:
    image: mongo
    container_name: user_mongodb1
    expose:
      - 27017
    volumes:
      - user_mongodb1_userData:/data/db
      - user_mongodb1_config:/data/configdb
    ports:
      - 27018:27017
    restart: always
  user_mongodb2:
    image: mongo
    container_name: user_mongodb2
    expose:
      - 27017
    volumes:
      - user_mongodb2_userData:/data/db
      - user_mongodb2_config:/data/configdb
    ports:
      - 27019:27017
    restart: always
  party_mongodb0:
    image: mongo
    container_name: party_mongodb0
    command: mongod --replSet partyServiceRelicationSet
    expose:
      - 27017
    ports:
      - 28017:27017
    volumes:
      - party_mongodb0_partyData:/data/db
      - party_mongodb0_config:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    restart: always
  party_mongodb1:
    image: mongo
    container_name: party_mongodb1
    command: mongod --replSet partyServiceRelicationSet
    expose:
      - 27017
    volumes:
      - party_mongodb1_partyData:/data/db
      - party_mongodb1_config:/data/configdb
    ports:
      - 28018:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    restart: always
  party_mongodb2:
    image: mongo
    container_name: party_mongodb2
    command: mongod --replSet partyServiceRelicationSet
    expose:
      - 27017
    volumes:
      - party_mongodb2_partyData:/data/db
      - party_mongodb2_config:/data/configdb
    ports:
      - 28019:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    restart: always
  party_mongodb_init:
    image: mongo
    restart: "no"
    depends_on:
      party_mongodb0:
        condition: service_healthy
      party_mongodb1:
        condition: service_healthy
      party_mongodb2:
        condition: service_healthy
    command: >
      mongosh --host party_mongodb0:27017 --eval  ' db = (new Mongo("party_mongodb0:27017")).getDB("partyService"); config = { "_id" : "partyServiceRelicationSet", "members" : [
        {
          "_id" : 0,
          "host" : "party_mongodb0:27017"
        },
        {
          "_id" : 1,
          "host" : "party_mongodb1:27017"
        },
        {
          "_id" : 2,
          "host" : "party_mongodb2:27017"
        }
      ] }; rs.initiate(config);'

volumes:
  user_mongodb0_userData:
  user_mongodb1_userData:
  user_mongodb2_userData:
  user_mongodb0_config:
  user_mongodb1_config:
  user_mongodb2_config:
  party_mongodb0_partyData:
  party_mongodb1_partyData:
  party_mongodb2_partyData:
  party_mongodb0_config:
  party_mongodb1_config:
  party_mongodb2_config:
